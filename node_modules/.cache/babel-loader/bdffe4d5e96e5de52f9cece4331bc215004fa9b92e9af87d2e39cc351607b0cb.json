{"ast":null,"code":"// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { useNavigate } from 'react-router-dom';\n// // import './DailyCaloriesForm.css';\n\n// // const DailyCaloriesForm = () => {\n// //   const [formData, setFormData] = useState({\n// //     height: '',\n// //     age: '',\n// //     currentWeight: '',\n// //     desiredWeight: '',\n// //     bloodType: '1',\n// //   });\n// //   const [calories, setCalories] = useState(null);\n// //   const [forbiddenFoods, setForbiddenFoods] = useState([]);\n// //   const [modalOpen, setModalOpen] = useState(false);\n// //   const navigate = useNavigate();\n\n// //   const handleChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setFormData({ ...formData, [name]: value });\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axios.post('http://localhost:5000/dailycalorieintake', formData);\n// //       const [allForbiddenFoods, setAllForbiddenFoods] = useState([]);\n// //       setCalories(response.data.calories);\n// //       setForbiddenFoods(response.data.forbiddenFoods); // Folosește cele 4 alimente\n// //       setAllForbiddenFoods(response.data.allForbiddenFoods); // Toate alimentele interzise\n\n// //       setModalOpen(true);\n// //       localStorage.setItem('calorieFormData', JSON.stringify(formData));\n// //       console.log('Data saved to localStorage:', formData);\n// //     } catch (error) {\n// //       console.error('Error calculating calories:', error);\n// //     }\n// //   };\n\n// //   const closeModal = () => {\n// //     setModalOpen(false);\n// //     document.body.classList.remove('modal-open');\n// //   };\n\n// //   useEffect(() => {\n// //     if (modalOpen) {\n// //       document.body.classList.add('modal-open');\n// //     } else {\n// //       document.body.classList.remove('modal-open');\n// //     }\n// //   }, [modalOpen]);\n\n// //   useEffect(() => {\n// //     const handleEscKey = (e) => {\n// //       if (e.key === 'Escape') {\n// //         closeModal();\n// //       }\n// //     };\n\n// //     document.addEventListener('keydown', handleEscKey);\n// //     return () => {\n// //       document.removeEventListener('keydown', handleEscKey);\n// //     };\n// //   }, []);\n\n// //   const redirectToLogin = () => {\n// //     navigate('/login');\n// //   };\n\n// //   const handleOverlayClick = (e) => {\n// //     // Închide modalul doar dacă click-ul a avut loc pe overlay, nu pe conținutul modalului\n// //     if (e.target === e.currentTarget) {\n// //       closeModal();\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       {/* Overlay */}\n// //       {modalOpen && <div className=\"overlay\" onClick={handleOverlayClick}></div>}\n\n// //       {/* Formularul */}\n// //       <form onSubmit={handleSubmit} className=\"form\">\n// //         <div className=\"column\">\n// //           <label>Height* <input type=\"number\" name=\"height\" required onChange={handleChange} /></label>\n// //           <label>Age* <input type=\"number\" name=\"age\" required onChange={handleChange} /></label>\n// //           <label>Current weight* <input type=\"number\" name=\"currentWeight\" required onChange={handleChange} /></label>\n// //         </div>\n\n// //         <div className=\"column\">\n// //           <label>Desired weight* <input type=\"number\" name=\"desiredWeight\" required onChange={handleChange} /></label>\n// //           <label>Blood type*</label>\n// //           <div className=\"blood-type-options\">\n// //             {['1', '2', '3', '4'].map((type) => (\n// //               <label key={type} className={`blood-type-label ${formData.bloodType === type ? 'active' : ''}`}>\n// //                 <input\n// //                   type=\"radio\"\n// //                   name=\"bloodType\"\n// //                   value={type}\n// //                   checked={formData.bloodType === type}\n// //                   onChange={handleChange}\n// //                 />\n// //                 <span className=\"radio-circle\"></span>\n// //                 <span className=\"blood-type-number\">{type}</span>\n// //               </label>\n// //             ))}\n// //           </div>\n// //         </div>\n\n// //         <button className=\"submit-btn\" type=\"submit\">Start losing weight</button>\n// //       </form>\n\n// //       {/* Modalul */}\n// //       {modalOpen && (\n// //         <div className=\"modal\" onClick={closeModal}>\n// //           <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n// //             <span className=\"close-btn\" onClick={closeModal}>&times;</span>\n// //             <h3>Your recommended daily calorie intake is</h3>\n// //             <p><span className='kcal'>{calories}</span> kcal</p>\n// //             <hr />\n// //             <h4>Foods you should not eat</h4>\n// //             <ul>\n// //               {forbiddenFoods.map((food, index) => <li key={index}>{index + 1}. {food}</li>)}\n// //             </ul>\n// //             <button className=\"start-btn\" onClick={redirectToLogin}>Start losing weight</button>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default DailyCaloriesForm;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import './DailyCaloriesForm.css';\n\n// // const DailyCaloriesForm = () => {\n// //   const [formData, setFormData] = useState({\n// //     height: '',\n// //     age: '',\n// //     currentWeight: '',\n// //     desiredWeight: '',\n// //     bloodType: '1',\n// //   });\n// //   const [calories, setCalories] = useState(null);\n// //   const [forbiddenFoods, setForbiddenFoods] = useState([]);\n// //   const [modalOpen, setModalOpen] = useState(false);\n// //   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/dailycalorieintake', {\n//         height: formData.height,\n//         age: formData.age,\n//         currentWeight: formData.currentWeight,\n//         desiredWeight: formData.desiredWeight,  // Include desiredWeight\n//         bloodType: formData.bloodType,\n//       });\n\n//       setCalories(response.data.calories);\n//       setForbiddenFoods(response.data.forbiddenFoods);  // Lista de alimente interzise\n//       localStorage.setItem('calorieFormData', JSON.stringify(formData));\n//       localStorage.setItem('caloriesData', JSON.stringify({\n//         dailyRate: response.data.calories,\n//         consumed: 0,\n//         notRecommendedFoods: response.data.forbiddenFoods,\n//       }));\n\n//       setModalOpen(true);\n//     } catch (error) {\n//       console.error('Error calculating calories:', error);\n//     }\n//   };\n\n//   const closeModal = () => {\n//     setModalOpen(false);\n//     document.body.classList.remove('modal-open');\n//   };\n\n//   useEffect(() => {\n//     if (modalOpen) {\n//       document.body.classList.add('modal-open');\n//     } else {\n//       document.body.classList.remove('modal-open');\n//     }\n//   }, [modalOpen]);\n\n//   const redirectToLogin = () => {\n//     navigate('/login');\n//   };\n\n//   const handleOverlayClick = (e) => {\n//     if (e.target === e.currentTarget) {\n//       closeModal();\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {modalOpen && <div className=\"overlay\" onClick={handleOverlayClick}></div>}\n\n//       <form onSubmit={handleSubmit} className=\"form\">\n//         <div className=\"column\">\n//           <label>Height* <input type=\"number\" name=\"height\" required onChange={handleChange} /></label>\n//           <label>Age* <input type=\"number\" name=\"age\" required onChange={handleChange} /></label>\n//           <label>Current weight* <input type=\"number\" name=\"currentWeight\" required onChange={handleChange} /></label>\n//         </div>\n\n//         <div className=\"column\">\n//           <label>Desired weight* <input type=\"number\" name=\"desiredWeight\" required onChange={handleChange} /></label>\n//           <label>Blood type*</label>\n//           <div className=\"blood-type-options\">\n//             {['1', '2', '3', '4'].map((type) => (\n//               <label key={type} className={`blood-type-label ${formData.bloodType === type ? 'active' : ''}`}>\n//                 <input\n//                   type=\"radio\"\n//                   name=\"bloodType\"\n//                   value={type}\n//                   checked={formData.bloodType === type}\n//                   onChange={handleChange}\n//                 />\n//                 <span className=\"radio-circle\"></span>\n//                 <span className=\"blood-type-number\">{type}</span>\n//               </label>\n//             ))}\n//           </div>\n//         </div>\n\n//         <button className=\"submit-btn\" type=\"submit\">Start losing weight</button>\n//       </form>\n\n//       {modalOpen && (\n//         <div className=\"modal\" onClick={closeModal}>\n//           <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n//             <span className=\"close-btn\" onClick={closeModal}>&times;</span>\n//             <h3>Your recommended daily calorie intake is</h3>\n//             <p><span className='kcal'>{calories}</span> kcal</p>\n//             <hr />\n//             <h4>Foods you should not eat</h4>\n//             <ul>\n//               {forbiddenFoods.map((food, index) => <li key={index}>{index + 1}. {food}</li>)}\n//             </ul>\n//             <button className=\"start-btn\" onClick={redirectToLogin}>Start losing weight</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DailyCaloriesForm;","map":{"version":3,"names":[],"sources":["C:/Users/rebec/Desktop/SlimMom/src/components/DailyCaloriesForm/DailyCaloriesForm.jsx"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useNavigate } from 'react-router-dom';\r\n// // import './DailyCaloriesForm.css';\r\n\r\n// // const DailyCaloriesForm = () => {\r\n// //   const [formData, setFormData] = useState({\r\n// //     height: '',\r\n// //     age: '',\r\n// //     currentWeight: '',\r\n// //     desiredWeight: '',\r\n// //     bloodType: '1',\r\n// //   });\r\n// //   const [calories, setCalories] = useState(null);\r\n// //   const [forbiddenFoods, setForbiddenFoods] = useState([]);\r\n// //   const [modalOpen, setModalOpen] = useState(false);\r\n// //   const navigate = useNavigate();\r\n\r\n// //   const handleChange = (e) => {\r\n// //     const { name, value } = e.target;\r\n// //     setFormData({ ...formData, [name]: value });\r\n// //   };\r\n\r\n// //   const handleSubmit = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       const response = await axios.post('http://localhost:5000/dailycalorieintake', formData);\r\n// //       const [allForbiddenFoods, setAllForbiddenFoods] = useState([]);\r\n// //       setCalories(response.data.calories);\r\n// //       setForbiddenFoods(response.data.forbiddenFoods); // Folosește cele 4 alimente\r\n// //       setAllForbiddenFoods(response.data.allForbiddenFoods); // Toate alimentele interzise\r\n      \r\n// //       setModalOpen(true);\r\n// //       localStorage.setItem('calorieFormData', JSON.stringify(formData));\r\n// //       console.log('Data saved to localStorage:', formData);\r\n// //     } catch (error) {\r\n// //       console.error('Error calculating calories:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const closeModal = () => {\r\n// //     setModalOpen(false);\r\n// //     document.body.classList.remove('modal-open');\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (modalOpen) {\r\n// //       document.body.classList.add('modal-open');\r\n// //     } else {\r\n// //       document.body.classList.remove('modal-open');\r\n// //     }\r\n// //   }, [modalOpen]);\r\n\r\n// //   useEffect(() => {\r\n// //     const handleEscKey = (e) => {\r\n// //       if (e.key === 'Escape') {\r\n// //         closeModal();\r\n// //       }\r\n// //     };\r\n\r\n// //     document.addEventListener('keydown', handleEscKey);\r\n// //     return () => {\r\n// //       document.removeEventListener('keydown', handleEscKey);\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   const redirectToLogin = () => {\r\n// //     navigate('/login');\r\n// //   };\r\n\r\n// //   const handleOverlayClick = (e) => {\r\n// //     // Închide modalul doar dacă click-ul a avut loc pe overlay, nu pe conținutul modalului\r\n// //     if (e.target === e.currentTarget) {\r\n// //       closeModal();\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       {/* Overlay */}\r\n// //       {modalOpen && <div className=\"overlay\" onClick={handleOverlayClick}></div>}\r\n\r\n// //       {/* Formularul */}\r\n// //       <form onSubmit={handleSubmit} className=\"form\">\r\n// //         <div className=\"column\">\r\n// //           <label>Height* <input type=\"number\" name=\"height\" required onChange={handleChange} /></label>\r\n// //           <label>Age* <input type=\"number\" name=\"age\" required onChange={handleChange} /></label>\r\n// //           <label>Current weight* <input type=\"number\" name=\"currentWeight\" required onChange={handleChange} /></label>\r\n// //         </div>\r\n\r\n// //         <div className=\"column\">\r\n// //           <label>Desired weight* <input type=\"number\" name=\"desiredWeight\" required onChange={handleChange} /></label>\r\n// //           <label>Blood type*</label>\r\n// //           <div className=\"blood-type-options\">\r\n// //             {['1', '2', '3', '4'].map((type) => (\r\n// //               <label key={type} className={`blood-type-label ${formData.bloodType === type ? 'active' : ''}`}>\r\n// //                 <input\r\n// //                   type=\"radio\"\r\n// //                   name=\"bloodType\"\r\n// //                   value={type}\r\n// //                   checked={formData.bloodType === type}\r\n// //                   onChange={handleChange}\r\n// //                 />\r\n// //                 <span className=\"radio-circle\"></span>\r\n// //                 <span className=\"blood-type-number\">{type}</span>\r\n// //               </label>\r\n// //             ))}\r\n// //           </div>\r\n// //         </div>\r\n\r\n// //         <button className=\"submit-btn\" type=\"submit\">Start losing weight</button>\r\n// //       </form>\r\n\r\n// //       {/* Modalul */}\r\n// //       {modalOpen && (\r\n// //         <div className=\"modal\" onClick={closeModal}>\r\n// //           <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n// //             <span className=\"close-btn\" onClick={closeModal}>&times;</span>\r\n// //             <h3>Your recommended daily calorie intake is</h3>\r\n// //             <p><span className='kcal'>{calories}</span> kcal</p>\r\n// //             <hr />\r\n// //             <h4>Foods you should not eat</h4>\r\n// //             <ul>\r\n// //               {forbiddenFoods.map((food, index) => <li key={index}>{index + 1}. {food}</li>)}\r\n// //             </ul>\r\n// //             <button className=\"start-btn\" onClick={redirectToLogin}>Start losing weight</button>\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default DailyCaloriesForm;\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import './DailyCaloriesForm.css';\r\n\r\n// // const DailyCaloriesForm = () => {\r\n// //   const [formData, setFormData] = useState({\r\n// //     height: '',\r\n// //     age: '',\r\n// //     currentWeight: '',\r\n// //     desiredWeight: '',\r\n// //     bloodType: '1',\r\n// //   });\r\n// //   const [calories, setCalories] = useState(null);\r\n// //   const [forbiddenFoods, setForbiddenFoods] = useState([]);\r\n// //   const [modalOpen, setModalOpen] = useState(false);\r\n// //   const navigate = useNavigate();\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     try {\r\n//       const response = await axios.post('http://localhost:5000/dailycalorieintake', {\r\n//         height: formData.height,\r\n//         age: formData.age,\r\n//         currentWeight: formData.currentWeight,\r\n//         desiredWeight: formData.desiredWeight,  // Include desiredWeight\r\n//         bloodType: formData.bloodType,\r\n//       });\r\n  \r\n//       setCalories(response.data.calories);\r\n//       setForbiddenFoods(response.data.forbiddenFoods);  // Lista de alimente interzise\r\n//       localStorage.setItem('calorieFormData', JSON.stringify(formData));\r\n//       localStorage.setItem('caloriesData', JSON.stringify({\r\n//         dailyRate: response.data.calories,\r\n//         consumed: 0,\r\n//         notRecommendedFoods: response.data.forbiddenFoods,\r\n//       }));\r\n  \r\n//       setModalOpen(true);\r\n//     } catch (error) {\r\n//       console.error('Error calculating calories:', error);\r\n//     }\r\n//   };\r\n  \r\n\r\n\r\n//   const closeModal = () => {\r\n//     setModalOpen(false);\r\n//     document.body.classList.remove('modal-open');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (modalOpen) {\r\n//       document.body.classList.add('modal-open');\r\n//     } else {\r\n//       document.body.classList.remove('modal-open');\r\n//     }\r\n//   }, [modalOpen]);\r\n\r\n//   const redirectToLogin = () => {\r\n//     navigate('/login');\r\n//   };\r\n\r\n//   const handleOverlayClick = (e) => {\r\n//     if (e.target === e.currentTarget) {\r\n//       closeModal();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {modalOpen && <div className=\"overlay\" onClick={handleOverlayClick}></div>}\r\n\r\n//       <form onSubmit={handleSubmit} className=\"form\">\r\n//         <div className=\"column\">\r\n//           <label>Height* <input type=\"number\" name=\"height\" required onChange={handleChange} /></label>\r\n//           <label>Age* <input type=\"number\" name=\"age\" required onChange={handleChange} /></label>\r\n//           <label>Current weight* <input type=\"number\" name=\"currentWeight\" required onChange={handleChange} /></label>\r\n//         </div>\r\n\r\n//         <div className=\"column\">\r\n//           <label>Desired weight* <input type=\"number\" name=\"desiredWeight\" required onChange={handleChange} /></label>\r\n//           <label>Blood type*</label>\r\n//           <div className=\"blood-type-options\">\r\n//             {['1', '2', '3', '4'].map((type) => (\r\n//               <label key={type} className={`blood-type-label ${formData.bloodType === type ? 'active' : ''}`}>\r\n//                 <input\r\n//                   type=\"radio\"\r\n//                   name=\"bloodType\"\r\n//                   value={type}\r\n//                   checked={formData.bloodType === type}\r\n//                   onChange={handleChange}\r\n//                 />\r\n//                 <span className=\"radio-circle\"></span>\r\n//                 <span className=\"blood-type-number\">{type}</span>\r\n//               </label>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n\r\n//         <button className=\"submit-btn\" type=\"submit\">Start losing weight</button>\r\n//       </form>\r\n\r\n//       {modalOpen && (\r\n//         <div className=\"modal\" onClick={closeModal}>\r\n//           <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n//             <span className=\"close-btn\" onClick={closeModal}>&times;</span>\r\n//             <h3>Your recommended daily calorie intake is</h3>\r\n//             <p><span className='kcal'>{calories}</span> kcal</p>\r\n//             <hr />\r\n//             <h4>Foods you should not eat</h4>\r\n//             <ul>\r\n//               {forbiddenFoods.map((food, index) => <li key={index}>{index + 1}. {food}</li>)}\r\n//             </ul>\r\n//             <button className=\"start-btn\" onClick={redirectToLogin}>Start losing weight</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DailyCaloriesForm;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}