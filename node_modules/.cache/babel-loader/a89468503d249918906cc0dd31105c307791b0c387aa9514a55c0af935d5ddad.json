{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rebec\\\\Desktop\\\\SlimMom\\\\src\\\\components\\\\DiaryAddProductForm\\\\DiaryAddProductForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getFoodFromDatabase } from '../../utils/api'; // Funcție pentru a prelua alimentele din baza de date\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiaryAddProductForm = ({\n  addProductToList\n}) => {\n  _s();\n  const [productName, setProductName] = useState('');\n  const [grams, setGrams] = useState('');\n  const [foodData, setFoodData] = useState([]);\n  const [selectedFood, setSelectedFood] = useState(null);\n  useEffect(() => {\n    if (productName.length > 2) {\n      // Căutăm alimentele care se potrivesc cu ceea ce tastează utilizatorul\n      getFoodFromDatabase(productName).then(data => setFoodData(data));\n    }\n  }, [productName]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!grams || !selectedFood) return;\n\n    // Calculăm caloriile pe baza greutății\n    const calories = selectedFood.calories * grams / 100;\n\n    // Adăugăm produsul în lista de produse\n    addProductToList({\n      name: selectedFood.title,\n      grams,\n      calories: Math.round(calories) // Rotunjim la cel mai apropiat întreg\n    });\n\n    // Resetăm formularul\n    setProductName('');\n    setGrams('');\n    setSelectedFood(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter product name\",\n      value: productName,\n      onChange: e => setProductName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), productName && foodData.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"food-suggestions\",\n      children: foodData.map(food => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setSelectedFood(food),\n        children: [food.title, \" - \", food.calories, \" kcal / 100g\"]\n      }, food._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Grams\",\n      value: grams,\n      onChange: e => setGrams(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(DiaryAddProductForm, \"Xf89XeNYm10shmJl3QYHLYKUwnU=\");\n_c = DiaryAddProductForm;\nexport default DiaryAddProductForm;\nvar _c;\n$RefreshReg$(_c, \"DiaryAddProductForm\");","map":{"version":3,"names":["React","useState","useEffect","getFoodFromDatabase","jsxDEV","_jsxDEV","DiaryAddProductForm","addProductToList","_s","productName","setProductName","grams","setGrams","foodData","setFoodData","selectedFood","setSelectedFood","length","then","data","handleSubmit","e","preventDefault","calories","name","title","Math","round","onSubmit","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","className","map","food","onClick","_id","_c","$RefreshReg$"],"sources":["C:/Users/rebec/Desktop/SlimMom/src/components/DiaryAddProductForm/DiaryAddProductForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getFoodFromDatabase } from '../../utils/api'; // Funcție pentru a prelua alimentele din baza de date\r\n\r\nconst DiaryAddProductForm = ({ addProductToList }) => {\r\n  const [productName, setProductName] = useState('');\r\n  const [grams, setGrams] = useState('');\r\n  const [foodData, setFoodData] = useState([]);\r\n  const [selectedFood, setSelectedFood] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (productName.length > 2) {\r\n      // Căutăm alimentele care se potrivesc cu ceea ce tastează utilizatorul\r\n      getFoodFromDatabase(productName).then(data => setFoodData(data));\r\n    }\r\n  }, [productName]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!grams || !selectedFood) return;\r\n\r\n    // Calculăm caloriile pe baza greutății\r\n    const calories = (selectedFood.calories * grams) / 100;\r\n    \r\n    // Adăugăm produsul în lista de produse\r\n    addProductToList({\r\n      name: selectedFood.title,\r\n      grams,\r\n      calories: Math.round(calories), // Rotunjim la cel mai apropiat întreg\r\n    });\r\n\r\n    // Resetăm formularul\r\n    setProductName('');\r\n    setGrams('');\r\n    setSelectedFood(null);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter product name\"\r\n        value={productName}\r\n        onChange={(e) => setProductName(e.target.value)}\r\n      />\r\n      {productName && foodData.length > 0 && (\r\n        <ul className=\"food-suggestions\">\r\n          {foodData.map((food) => (\r\n            <li key={food._id} onClick={() => setSelectedFood(food)}>\r\n              {food.title} - {food.calories} kcal / 100g\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Grams\"\r\n        value={grams}\r\n        onChange={(e) => setGrams(e.target.value)}\r\n      />\r\n      <button type=\"submit\">+</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DiaryAddProductForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}