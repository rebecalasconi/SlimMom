{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import DiaryAddProductForm from'../../components/DiaryAddProductForm/DiaryAddProductForm';import DiaryProductsList from'../../components/DiaryProductsList/DiaryProductsList';import RightSideBar from'../../components/RightSideBar/RightSideBar';import Header from'../../components/Header/Header';import'./DiaryPage.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const DiaryPage=()=>{const[userData,setUserData]=useState({height:'',age:'',currentWeight:'',desiredWeight:'',bloodType:'1'});const[dailyData,setDailyData]=useState(()=>{return JSON.parse(localStorage.getItem('dailyData'))||{};});const[selectedDate,setSelectedDate]=useState(new Date().toISOString().split('T')[0]);const[dailyRate,setDailyRate]=useState(0);const[consumed,setConsumed]=useState(0);const[forbiddenFoods,setForbiddenFoods]=useState([]);const[allForbiddenFoods,setAllForbiddenFoods]=useState([]);const[products,setProducts]=useState([]);const[productList,setProductList]=useState([]);//   const [selectedDate, setSelectedDate] = useState('');\nconst[isUserSelectedDate,setIsUserSelectedDate]=useState(false);const formatDate=dateString=>{const[year,month,day]=dateString.split('-');return`${day}.${month}.${year}`;};const[formattedDate,setFormattedDate]=useState(formatDate(new Date().toISOString().split('T')[0]));// format dd.mm.yyyy\nconst getUserKey=key=>{const userName=localStorage.getItem('userName');return userName?`${userName}_${key}`:key;};useEffect(()=>{const userName=localStorage.getItem('userName');if(!userName){// Dacă nu există user logat, resetează datele\nsetSelectedDate(new Date().toISOString().split('T')[0]);setProducts([]);setConsumed(0);setDailyRate(0);setForbiddenFoods([]);setAllForbiddenFoods([]);return;}const storedSelectedDate=localStorage.getItem('selectedDate')||new Date().toISOString().split('T')[0];setSelectedDate(storedSelectedDate);// pentru input\nsetFormattedDate(formatDate(storedSelectedDate));// pentru afișare\nconst userKey=getUserKey('caloriesDataByDate');const savedData=JSON.parse(localStorage.getItem(userKey))||{};const dataForSelectedDate=savedData[storedSelectedDate]||{products:[],consumed:0};setProducts(dataForSelectedDate.products);setConsumed(dataForSelectedDate.consumed);const storedData=JSON.parse(localStorage.getItem('caloriesData'));const storedFormData=JSON.parse(localStorage.getItem('calorieFormData'));if(storedData){setDailyRate(storedData.dailyRate||0);setForbiddenFoods(storedData.forbiddenFoods||[]);setAllForbiddenFoods(storedData.allForbiddenFoods||[]);}if(storedFormData){setUserData(storedFormData);}},[]);const updateCalories=calories=>{// Logica pentru actualizarea caloriilor\nsetConsumed(consumed+calories);};//   const handleDateChange = (e) => {\n//     setSelectedDate(e.target.value);\n//     setIsUserSelectedDate(true);\n//   };\nconst handleDateChange=e=>{const newDate=e.target.value;setSelectedDate(newDate);// pentru input (yyyy-mm-dd)\nsetFormattedDate(formatDate(newDate));// pentru afișare (dd.mm.yyyy)\nsetIsUserSelectedDate(true);// Salvează în localStorage\nlocalStorage.setItem('selectedDate',newDate);// Actualizează datele pentru ziua selectată\nconst userKey=getUserKey('caloriesDataByDate');const savedData=JSON.parse(localStorage.getItem(userKey))||{};const dataForSelectedDate=savedData[newDate]||{products:[],consumed:0};setProducts(dataForSelectedDate.products);setConsumed(dataForSelectedDate.consumed);};const saveDataForDate=(date,products,consumed)=>{const userKey=getUserKey('caloriesDataByDate');const existingData=JSON.parse(localStorage.getItem(userKey))||{};const updatedData={...existingData,[date]:{products,consumed}};// setDailyData(updatedData);\n// localStorage.setItem('dailyData', JSON.stringify(updatedData));\nlocalStorage.setItem(userKey,JSON.stringify(updatedData));};const addProductToList=product=>{const updatedProducts=[...products,product];const updatedConsumed=consumed+product.calories;setProducts(updatedProducts);setConsumed(updatedConsumed);saveDataForDate(selectedDate,updatedProducts,updatedConsumed);};useEffect(()=>{const savedData=JSON.parse(localStorage.getItem('caloriesDataByDate'))||{};savedData[selectedDate]={products,consumed};localStorage.setItem('caloriesDataByDate',JSON.stringify(savedData));},[products,consumed,selectedDate]);const handleRemoveProduct=(id,calories)=>{const updatedProducts=products.filter(product=>product.id!==id);const updatedConsumed=consumed-calories;setProducts(updatedProducts);setConsumed(updatedConsumed);saveDataForDate(selectedDate,updatedProducts,updatedConsumed);};// const addProductToList = (newProduct) => {\n//   setProductList((prevList) => [...prevList, newProduct]);\n// };\nuseEffect(()=>{const userKey=getUserKey('caloriesDataByDate');const savedData=JSON.parse(localStorage.getItem(userKey))||{};const dataForSelectedDate=savedData[selectedDate]||{products:[],consumed:0};setProducts(dataForSelectedDate.products);setConsumed(dataForSelectedDate.consumed);},[selectedDate]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container-full\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"leftPanel\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"datePickerContainer\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"selectedDate\",children:formatDate(selectedDate)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"date\",className:\"calendarLabel\",children:\"\\uD83D\\uDCC5\"}),/*#__PURE__*/_jsx(\"input\",{id:\"date\",type:\"date\",className:\"calendarPicker\",value:selectedDate,onChange:handleDateChange})]}),/*#__PURE__*/_jsx(DiaryAddProductForm,{addProductToList:addProductToList,allForbiddenFoods:allForbiddenFoods,selectedDate:selectedDate,updateCalories:updateCalories,productList:products,removeProduct:handleRemoveProduct// Asigură-te că este transmis corect în props\n})]}),/*#__PURE__*/_jsx(\"div\",{className:\"rightPanel\",children:/*#__PURE__*/_jsx(RightSideBar,{dailyRate:dailyRate,consumed:consumed,forbiddenFoods:forbiddenFoods,allForbiddenFoods:allForbiddenFoods,selectedDate:selectedDate})})]})]})});};export default DiaryPage;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","DiaryAddProductForm","DiaryProductsList","RightSideBar","Header","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DiaryPage","userData","setUserData","height","age","currentWeight","desiredWeight","bloodType","dailyData","setDailyData","JSON","parse","localStorage","getItem","selectedDate","setSelectedDate","Date","toISOString","split","dailyRate","setDailyRate","consumed","setConsumed","forbiddenFoods","setForbiddenFoods","allForbiddenFoods","setAllForbiddenFoods","products","setProducts","productList","setProductList","isUserSelectedDate","setIsUserSelectedDate","formatDate","dateString","year","month","day","formattedDate","setFormattedDate","getUserKey","key","userName","storedSelectedDate","userKey","savedData","dataForSelectedDate","storedData","storedFormData","updateCalories","calories","handleDateChange","e","newDate","target","value","setItem","saveDataForDate","date","existingData","updatedData","stringify","addProductToList","product","updatedProducts","updatedConsumed","handleRemoveProduct","id","filter","children","className","htmlFor","type","onChange","removeProduct"],"sources":["C:/Users/rebec/Desktop/SlimMom/src/pages/DiaryPage/DiaryPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DiaryAddProductForm from '../../components/DiaryAddProductForm/DiaryAddProductForm';\r\nimport DiaryProductsList from '../../components/DiaryProductsList/DiaryProductsList';\r\nimport RightSideBar from '../../components/RightSideBar/RightSideBar';\r\nimport Header from '../../components/Header/Header';\r\nimport './DiaryPage.css';\r\n\r\nconst DiaryPage = () => {\r\n  const [userData, setUserData] = useState({\r\n    height: '',\r\n    age: '',\r\n    currentWeight: '',\r\n    desiredWeight: '',\r\n    bloodType: '1',\r\n  });\r\n\r\n  const [dailyData, setDailyData] = useState(() => {\r\n    return JSON.parse(localStorage.getItem('dailyData')) || {};\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\r\n\r\n  const [dailyRate, setDailyRate] = useState(0);\r\n  const [consumed, setConsumed] = useState(0);\r\n  const [forbiddenFoods, setForbiddenFoods] = useState([]);\r\n  const [allForbiddenFoods, setAllForbiddenFoods] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [productList, setProductList] = useState([]);\r\n//   const [selectedDate, setSelectedDate] = useState('');\r\n  const [isUserSelectedDate, setIsUserSelectedDate] = useState(false); \r\n\r\n  const formatDate = (dateString) => {\r\n    const [year, month, day] = dateString.split('-');\r\n    return `${day}.${month}.${year}`;\r\n  };\r\n\r\n  const [formattedDate, setFormattedDate] = useState(formatDate(new Date().toISOString().split('T')[0])); // format dd.mm.yyyy\r\n\r\n\r\n  const getUserKey = (key) => {\r\n    const userName = localStorage.getItem('userName');\r\n    return userName ? `${userName}_${key}` : key;\r\n  };\r\n  useEffect(() => {\r\n    const userName = localStorage.getItem('userName');\r\n    if (!userName) {\r\n      // Dacă nu există user logat, resetează datele\r\n      setSelectedDate(new Date().toISOString().split('T')[0]);\r\n      setProducts([]);\r\n      setConsumed(0);\r\n      setDailyRate(0);\r\n      setForbiddenFoods([]);\r\n      setAllForbiddenFoods([]);\r\n      return;\r\n    }\r\n  \r\n    const storedSelectedDate = localStorage.getItem('selectedDate') || new Date().toISOString().split('T')[0];\r\n    setSelectedDate(storedSelectedDate); // pentru input\r\n    setFormattedDate(formatDate(storedSelectedDate)); // pentru afișare\r\n    \r\n    const userKey = getUserKey('caloriesDataByDate');\r\n    const savedData = JSON.parse(localStorage.getItem(userKey)) || {};\r\n    const dataForSelectedDate = savedData[storedSelectedDate] || { products: [], consumed: 0 };\r\n    \r\n    setProducts(dataForSelectedDate.products);\r\n    setConsumed(dataForSelectedDate.consumed);\r\n  \r\n    const storedData = JSON.parse(localStorage.getItem('caloriesData'));\r\n    const storedFormData = JSON.parse(localStorage.getItem('calorieFormData'));\r\n  \r\n    if (storedData) {\r\n      setDailyRate(storedData.dailyRate || 0);\r\n      setForbiddenFoods(storedData.forbiddenFoods || []);\r\n      setAllForbiddenFoods(storedData.allForbiddenFoods || []);\r\n    }\r\n  \r\n    if (storedFormData) {\r\n      setUserData(storedFormData);\r\n    }\r\n  }, []);\r\n  \r\n  const updateCalories = (calories) => {\r\n    // Logica pentru actualizarea caloriilor\r\n    setConsumed(consumed + calories);\r\n  };\r\n\r\n//   const handleDateChange = (e) => {\r\n//     setSelectedDate(e.target.value);\r\n//     setIsUserSelectedDate(true);\r\n//   };\r\n\r\n  \r\n  const handleDateChange = (e) => {\r\n    const newDate = e.target.value;\r\n    setSelectedDate(newDate); // pentru input (yyyy-mm-dd)\r\n    setFormattedDate(formatDate(newDate)); // pentru afișare (dd.mm.yyyy)\r\n    setIsUserSelectedDate(true);\r\n    \r\n    // Salvează în localStorage\r\n    localStorage.setItem('selectedDate', newDate);\r\n    \r\n    // Actualizează datele pentru ziua selectată\r\n    const userKey = getUserKey('caloriesDataByDate');\r\n    const savedData = JSON.parse(localStorage.getItem(userKey)) || {};\r\n    const dataForSelectedDate = savedData[newDate] || { products: [], consumed: 0 };\r\n    \r\n    setProducts(dataForSelectedDate.products);\r\n    setConsumed(dataForSelectedDate.consumed);\r\n  };\r\n  \r\n  \r\n  const saveDataForDate = (date, products, consumed) => {\r\n    const userKey = getUserKey('caloriesDataByDate');\r\n    const existingData = JSON.parse(localStorage.getItem(userKey)) || {};\r\n    \r\n    const updatedData = {\r\n      ...existingData,\r\n      [date]: { products, consumed },\r\n    };\r\n    // setDailyData(updatedData);\r\n    // localStorage.setItem('dailyData', JSON.stringify(updatedData));\r\n    localStorage.setItem(userKey, JSON.stringify(updatedData));\r\n  };\r\n\r\n  const addProductToList = (product) => {\r\n    const updatedProducts = [...products, product];\r\n    const updatedConsumed = consumed + product.calories;\r\n    setProducts(updatedProducts);\r\n    setConsumed(updatedConsumed);\r\n    saveDataForDate(selectedDate, updatedProducts, updatedConsumed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const savedData = JSON.parse(localStorage.getItem('caloriesDataByDate')) || {};\r\n  \r\n    savedData[selectedDate] = {\r\n      products,\r\n      consumed,\r\n    };\r\n  \r\n    localStorage.setItem('caloriesDataByDate', JSON.stringify(savedData));\r\n  }, [products, consumed, selectedDate]);\r\n  \r\n  const handleRemoveProduct = (id, calories) => {\r\n    const updatedProducts = products.filter((product) => product.id !== id);\r\n    const updatedConsumed = consumed - calories;\r\n    setProducts(updatedProducts);\r\n    setConsumed(updatedConsumed);\r\n    saveDataForDate(selectedDate, updatedProducts, updatedConsumed);\r\n  };\r\n\r\n// const addProductToList = (newProduct) => {\r\n//   setProductList((prevList) => [...prevList, newProduct]);\r\n// };\r\n\r\nuseEffect(() => {\r\n    const userKey = getUserKey('caloriesDataByDate');\r\n    const savedData = JSON.parse(localStorage.getItem(userKey)) || {};\r\n    \r\n    const dataForSelectedDate = savedData[selectedDate] || { products: [], consumed: 0 };\r\n    \r\n    setProducts(dataForSelectedDate.products);\r\n    setConsumed(dataForSelectedDate.consumed);\r\n  }, [selectedDate]);\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container-full\">\r\n      <Header />\r\n      <div className=\"container\">\r\n        <div className=\"leftPanel\">\r\n          <div className=\"datePickerContainer\">\r\n          <p className=\"selectedDate\">\r\n          {formatDate(selectedDate)}</p>\r\n            <label htmlFor=\"date\" className=\"calendarLabel\">\r\n              📅\r\n            </label>\r\n            <input\r\n              id=\"date\"\r\n              type=\"date\"\r\n              className=\"calendarPicker\"\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n            />\r\n          </div>\r\n\r\n          <DiaryAddProductForm\r\n  addProductToList={addProductToList}\r\n  allForbiddenFoods={allForbiddenFoods}\r\n  selectedDate={selectedDate}\r\n  updateCalories={updateCalories}\r\n  productList={products}\r\n  removeProduct={handleRemoveProduct} // Asigură-te că este transmis corect în props\r\n/>\r\n\r\n        </div>\r\n\r\n        <div className=\"rightPanel\">\r\n          <RightSideBar\r\n            dailyRate={dailyRate}\r\n            consumed={consumed}\r\n            forbiddenFoods={forbiddenFoods}\r\n            allForbiddenFoods={allForbiddenFoods}\r\n            selectedDate={selectedDate}\r\n          />\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DiaryPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}